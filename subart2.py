import subprocess
import re

SYSTEM_PROMPT = """<|begin_of_text|>
<|start_header_id|>system<|end_header_id|>
Generate crime reports for Night City in EXACT format:

Location: [District name in Night City]
Time: [Approximate time]
Headline: [Under 8 words]
Summary: [1 sentence with casualty count]

Then translate the report to Russian after '---' in this EXACT format:
–õ–æ–∫–∞—Ü–∏—è: [–†–∞–π–æ–Ω –≤ –ù–∞–π—Ç-–°–∏—Ç–∏]
–í—Ä–µ–º—è: [–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è]
–ó–∞–≥–æ–ª–æ–≤–æ–∫: [–î–æ 8 —Å–ª–æ–≤]
–°–≤–æ–¥–∫–∞: [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —á–∏—Å–ª–æ–º –∂–µ—Ä—Ç–≤]

Night City districts: Watson, Westbrook, Heywood, Pacifica, Santo Domingo, City Center, Badlands.
If a street name is mentioned, assign it to the correct district. 
If district is unclear, use the street name as a landmark within "Heywood" district.

Important rules:
1. Never include any commentary or additional text
2. Use only allowed characters in Russian text
3. Always maintain the exact format
4. Replace any non-Russian characters in Russian part with equivalents<|eot_id|>

<|start_header_id|>user<|end_header_id|>
Event: {input}<|eot_id|>

<|start_header_id|>assistant<|end_header_id|>"""

def validate_english_format(text):
    """Validate the English part of the response has the correct format"""
    required_sections = ["Location", "Time", "Headline", "Summary"]
    return all(re.search(rf'{section}:', text) for section in required_sections)

def validate_russian_format(text):
    """Validate the Russian part of the response has the correct format"""
    required_sections = ["–õ–æ–∫–∞—Ü–∏—è", "–í—Ä–µ–º—è", "–ó–∞–≥–æ–ª–æ–≤–æ–∫", "–°–≤–æ–¥–∫–∞"]
    return all(re.search(rf'{section}:', text) for section in required_sections)

def clean_russian_text(text):
    """Clean and validate Russian text, replacing invalid characters"""
    # Expanded character mapping for replacements
    char_map = {
        'a': '–∞', 'b': '–±', 'c': '—Å', 'd': '–¥', 'e': '–µ', 
        'g': '–≥', 'h': '—Ö', 'i': '–∏', 'k': '–∫', 'l': '–ª', 
        'm': '–º', 'n': '–Ω', 'o': '–æ', 'p': '–ø', 'r': '—Ä', 
        's': '—Å', 't': '—Ç', 'u': '—É', 'v': '–≤', 'w': '–≤', 
        'x': '—Ö', 'y': '—É', 'z': '–∑',
        'A': '–ê', 'B': '–í', 'C': '–°', 'D': '–î', 'E': '–ï', 
        'F': '–§', 'G': '–ì', 'H': '–ù', 'I': '–ò', 'K': '–ö', 
        'L': '–õ', 'M': '–ú', 'N': '–ù', 'O': '–û', 'P': '–†', 
        'R': '–†', 'S': '–°', 'T': '–¢', 'U': '–£', 'V': '–í', 
        'W': '–í', 'X': '–•', 'Y': '–£', 'Z': '–ó'
    }
    
    # Process each character
    cleaned_text = []
    for char in text:
        if char in char_map:
            cleaned_text.append(char_map[char])
        else:
            cleaned_text.append(char)
    
    return ''.join(cleaned_text)

def validate_russian_text(text):
    """Check and clean Russian text"""
    # First clean the text
    text = clean_russian_text(text)
    
    # Define allowed characters
    russian_alphabet = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø')
    allowed_punctuation = set(' .,!?;:-‚Äî‚Äì()[]{}¬´¬ª"\'\n\t')
    allowed_digits = set('0123456789')
    allowed_in_russian = russian_alphabet | allowed_punctuation | allowed_digits
    
    # Remove section headers before checking
    for header in ["–õ–æ–∫–∞—Ü–∏—è:", "–í—Ä–µ–º—è:", "–ó–∞–≥–æ–ª–æ–≤–æ–∫:", "–°–≤–æ–¥–∫–∞:"]:
        text = text.replace(header, "")
    
    # Just check for any remaining non-Russian characters but don't fail validation
    for char in text:
        if char not in allowed_in_russian:
            print(f"Warning: Character '{char}' may not display correctly in Russian")
    
    return True  # We now clean text instead of rejecting

def extract_location_info(text):
    """Extract street and time information from input text"""
    # Look for street names
    street_match = re.search(r'(\w+)\s+[Ss]treet', text)
    street = street_match.group(1) if street_match else None
    
    # Look for time format HH:MM
    time_match = re.search(r'(\d{1,2}:\d{2})', text)
    time = time_match.group(1) if time_match else None
    
    return street, time

def query_model(news_input):
    """Query the model with strict validation"""
    try:
        # Extract location and time info to help with prompt formatting
        street, time = extract_location_info(news_input)
        
        # Enhance input if needed
        if street and "district" not in news_input.lower():
            if street.lower() == "heywood":
                news_input = f"{news_input} (Heywood District)"
        
        formatted_prompt = SYSTEM_PROMPT.format(input=news_input)
        
        process = subprocess.Popen(
            ['ollama', 'run', 'llama3'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8',
            bufsize=1
        )
        
        try:
            stdout, stderr = process.communicate(input=formatted_prompt, timeout=240)
        except subprocess.TimeoutExpired:
            process.kill()
            print("Model query timed out after 240 seconds")
            return "", False
            
        if process.returncode != 0:
            print(f"Model process failed with return code {process.returncode}")
            if stderr:
                print(f"Error: {stderr.strip()}")
            return "", False
            
        output = stdout.strip()
        
        # Split and validate parts
        parts = output.split('---', 1)
        english = parts[0].strip()
        russian = parts[1].strip() if len(parts) > 1 else ""
        
        # Check and fix "District unknown" if needed
        if "Location: District unknown" in english and street:
            # Default to Heywood if street is mentioned but district is unknown
            english = english.replace("Location: District unknown", f"Location: Heywood")
        
        english_valid = validate_english_format(english)
        
        # Process Russian part
        russian_valid = False
        if russian:
            # Check and fix unknown district in Russian text
            if "–õ–æ–∫–∞—Ü–∏—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω" in russian and street:
                russian = russian.replace("–õ–æ–∫–∞—Ü–∏—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω", "–õ–æ–∫–∞—Ü–∏—è: –•–µ–π–≤—É–¥")
                
            russian = clean_russian_text(russian)  # Apply the replacement here
            russian_valid = validate_russian_format(russian) and validate_russian_text(russian)
        
        if english_valid and russian_valid:
            print("Valid output generated!")
            return f"{english}\n---\n{russian}", True
        elif english_valid:
            print("Only English part is valid")
            return english, True
        else:
            print("Invalid output generated.")
            return output, False
            
    except Exception as e:
        print(f"Error running model query: {e}")
        return "", False

if __name__ == "__main__":
    print("üîπ Night City Crime Reporter üîπ")
    event = input("Crime details: ").strip()
    
    if event:
        output, is_valid = query_model(event)
        
        if output:
            parts = output.split('---', 1)
            english = parts[0].strip()
            
            print("\nüì∞ Breaking News:")
            print(english)
            
            if len(parts) > 1:
                russian = parts[1].strip()
                print("\nüåç –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –ù–æ–≤–æ—Å—Ç–∏:")
                print(russian)
        
        if not is_valid:
            print("\n‚ö† Note: The report may have formatting issues but was still displayed.")